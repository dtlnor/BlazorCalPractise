@inherits LayoutComponentBase
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="page">
    
    <div class="sidebar">
        <NavMenu />
    </div>
    
    <div class="main">
        <div class="top-row px-4">
	        <div class="row align-items-center text-muted px-4">
	            <div class="col"></div>
	            <div class="col-auto">
	                <span class="oi oi-globe" aria-hidden="true"></span>
	            </div>
                @*@(Pagei18n.LangName+"+"+CurrentLang)*@
	            <div class="col-auto">
	                <select class="form-control form-control-sm" @onchange="OnChangeCurrentLang">
	                    <option value="zh-Hans" selected="@(CurrentLang == "zh-Hans")">简体中文</option>
	                    <option value="zh-Hant" selected="@(CurrentLang == "zh-Hant")">繁體中文</option>
	                    <option value="en" selected="@(CurrentLang == "en")">English</option>
	                    <option value="ja" selected="@(CurrentLang == "ja")">日本語</option>
	                    <option value="ko" selected="@(CurrentLang == "ko")">한국어</option>
	                </select>
	            </div>
	        </div>
	    </div>

        <div class="content p-4">
            @Body
        </div>
    </div>
</div>


@code {
    public string CurrentLang;

    I18nText.MainPage Pagei18n = new I18nText.MainPage();

    protected override async Task OnInitializedAsync()
    {
        if (await localStorage.ContainKeyAsync("CurrentLang"))
        {
            var lang = await localStorage.GetItemAsync<string>("CurrentLang");
            CurrentLang = lang;
        }
        else
        {
            // use browser default
            var lang = await I18nText.GetCurrentLanguageAsync();

            if (new[] { "en", "ja", "zh", "ko" }.Contains(lang.Split('-')[0]))
            {
                if (lang.Contains("zh"))
                {
                    if (lang.ToLower().Contains("chs") || lang.ToLower().Contains("cn") || lang.ToLower().Contains("hans")){
                        CurrentLang = "zh-Hans";
                    }
                    else
                    {
                        CurrentLang = "zh-Hant";
                    }
                }
                else
                {
                    CurrentLang = lang;
                }
            }
            else
            {
                CurrentLang = "en";
            }
        }

        Pagei18n = await I18nText.GetTextTableAsync<I18nText.MainPage>(this);
        I18nText.ChangeLanguage += (s, a) =>
        {
            Console.WriteLine($"Language Changed: {a.LanguageCode}");
        };
        
        await I18nText.SetCurrentLanguageAsync(CurrentLang);
        
        await localStorage.SetItemAsync("CurrentLang",CurrentLang);

    }

    private async Task OnChangeCurrentLang(ChangeEventArgs args)
    {
        Console.WriteLine($"OnChange: {args.Value}");
        CurrentLang = args.Value as string;
        await I18nText.SetCurrentLanguageAsync(CurrentLang);
    }
}