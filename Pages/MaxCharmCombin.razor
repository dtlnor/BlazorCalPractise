@page "/maxCharmCombin"
@inject HttpClient Http

<h1>Charm Combination Generator</h1>

@if (skillNameIDPair == null)
{
    <p><em>Loading...</em></p>
}
else
{
    nameLookUp = (skillNameIDPair[Enum.GetName(Global.LangIndex.chS)]).ToObject<Dictionary<int, string>>();
    var charmSkill = new Dictionary<int, string>();
    foreach (var skill in skillMaxs)
    {
        charmSkill.Add(skill.SkillID, nameLookUp[skill.SkillID]);
    }

<div class="col-auto">
    <div class="row">
        <label class="font-weight-bold">Toggle the skill you want in charm :</label>
        <CheckList Data="@charmSkill"
                   TextField="@((item)=>item.Value)"
                   ValueField="@((item)=>item.Key)"
                   SelectedValues="@SelectedIds" />
    </div>
    <br />
    <div class="row">
        <br />
        <label class="font-weight-bold">Selected @SelectedIds.Count() Skills :</label>
        <b>@OutPutValue</b>
        <br />
        <label class="font-weight-bold">@CharmCount Charm Generated.</label>
    </div>
    <br />
    <div class="row">
        <span class="col-auto"></span>
        <button class="form-control col-auto btn btn-primary" @onclick="ShowCharmCombins">Show Checked Combinations</button>
    </div>
    <br />
    <div class="form-group row">
        <label>
            Charm generated for input to Armor search. (only support Max Charm Combinations at the moment).<br/>
            @for (int i = 0; i < CharmCombinText.Count; i++)
            {
            <b>from @( (i*2500 > int.Parse(CharmCount)) ? CharmCount : i * 2500) to @( ( (i+1)*2500 > int.Parse(CharmCount)) ? CharmCount : (i+1) * 2500)</b>
                <textarea class="form-control col-auto" rows="5" @bind="@CharmCombinText[i]"></textarea>
            }
        </label>
    </div>

</div>
}
